import { createSignal, createEffect, onMount, onCleanup } from 'solid-js'

export default function CurrencyBoard() {
  const [rates, setRates] = createSignal({})
  const [loading, setLoading] = createSignal(true)
  const [lastUpdate, setLastUpdate] = createSignal('')
  const [nextUpdate, setNextUpdate] = createSignal(0)
  const [timeUntilUpdate, setTimeUntilUpdate] = createSignal(0)

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ç–∞–±–ª–æ
  const popularCurrencies = [
    { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', flag: 'üá∫üá∏' },
    { code: 'EUR', name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
    { code: 'GBP', name: '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç', flag: 'üá¨üáß' },
    { code: 'JPY', name: '–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞', flag: 'üáØüáµ' }
  ]

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ ExchangeRate API
  const loadExchangeRates = async () => {
    try {
      setLoading(true)
      
      const apiKey = 'ddc693307c11cd02d9ad0945'
      const apiUrl = `https://v6.exchangerate-api.com/v6/${apiKey}/latest/USD`
      
      const response = await fetch(apiUrl)
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`)
      }
      
      const data = await response.json()
      
      if (data.result !== 'success') {
        throw new Error('API returned error result')
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ API
      setRates(data.conversion_rates)
      setLastUpdate(data.time_last_update_utc)
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const nextUpdateTime = new Date(data.time_next_update_unix * 1000)
      const now = new Date()
      const secondsUntilUpdate = Math.max(0, Math.floor((nextUpdateTime - now) / 1000))
      setNextUpdate(secondsUntilUpdate)
      setTimeUntilUpdate(secondsUntilUpdate)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ç–∞–±–ª–æ:', error)
      
      // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
      const mockRates = {
        USD: 1.0,
        EUR: 0.85,
        RUB: 95.50,
        GBP: 0.75,
        JPY: 150.25
      }
      
      setRates(mockRates)
      setLastUpdate(new Date().toISOString())
      setNextUpdate(300)
      setTimeUntilUpdate(300)
    } finally {
      setLoading(false)
    }
  }

  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const startCountdown = () => {
    const timer = setInterval(() => {
      setTimeUntilUpdate(prev => {
        const newTime = Math.max(0, prev - 1)
        if (newTime === 0) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
          loadExchangeRates()
        }
        return newTime
      })
    }, 1000)

    onCleanup(() => clearInterval(timer))
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = seconds % 60
    
    if (hours > 0) {
      return `${hours}—á ${minutes}–º ${secs}—Å`
    } else if (minutes > 0) {
      return `${minutes}–º ${secs}—Å`
    } else {
      return `${secs}—Å`
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const formatLastUpdate = (dateString) => {
    if (!dateString) return ''
    
    try {
      const date = new Date(dateString)
      return date.toLocaleString('ru-RU', {
        weekday: 'short',
        day: '2-digit',
        month: 'short',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZoneName: 'short'
      })
    } catch (error) {
      return dateString
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é
  const getCurrencyToRub = (currencyCode) => {
    const currentRates = rates()
    if (!currentRates || !currentRates[currencyCode] || !currentRates['RUB']) {
      return 0
    }
    
    // –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é
    const rate = currentRates['RUB'] / currentRates[currencyCode]
    return Math.round(rate * 100) / 100
  }

  onMount(() => {
    loadExchangeRates()
    startCountdown()
  })

  return (
    <div class="currency-board">
      <div class="board-header">
        <h2>üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é</h2>
      </div>

      {loading() ? (
        <div class="board-loading">
          <div class="spinner">‚è≥</div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...</p>
        </div>
      ) : (
        <div class="currency-grid">
          {popularCurrencies.map(currency => {
            const rate = getCurrencyToRub(currency.code)
            return (
              <div class="currency-card" key={currency.code}>
                <div class="currency-header">
                  <span class="currency-flag">{currency.flag}</span>
                  <span class="currency-code">{currency.code}</span>
                </div>
                <div class="currency-rate">
                  {rate > 0 ? (
                    <>
                      <span class="rate-value">{rate}</span>
                      <span class="rate-currency">‚ÇΩ</span>
                    </>
                  ) : (
                    <span class="rate-loading">...</span>
                  )}
                </div>
                <div class="currency-name">{currency.name}</div>
              </div>
            )
          })}
        </div>
      )}

      <div class="board-footer">
        <button 
          onClick={loadExchangeRates} 
          class="update-button" 
          disabled={loading()}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã
        </button>
      </div>
    </div>
  )
}